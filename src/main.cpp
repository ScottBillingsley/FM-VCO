/******************** FM VCO   ****************************/
/*
                    Vernon Billingsley 2022
              A FM VCO for the ATmega128 running at 20 mHz
              Built on my Dgital VCO Base 

              https://github.com/ScottBillingsley/Digital-VCO

              PIN         Function
              -------------------------
              PA0       Onboard LED
              PA1       Onboard LED
              PA2
              PA3
              PA4
              PA5
              PA6
              PA7
              PB0
              PB1
              PB2
              PB3
              PB4
              PB5       OC1A  PWM Output
              PB6
              PB7
              PC0
              PC1
              PC2
              PC3
              PC4
              PC5
              PC6
              PC7
              PD0       Blinky LED tied to zero crossing on the sample
              PD1       LED
              PD2
              PD3
              PD4
              PD5
              PD6
              PD7
              PE0
              PE1
              PE2
              PE3
              PE4
              PE5
              PE6
              PE7
              PF0     ADC0    Base Freq Set Knob
              PF1     ADC1    Mod Freq
              PF2     ADC2    Mod Amount
              PF3     ADC3    CV in     
              PF4
              PF5
              PF6
              PF7                                                                      

*/


#include <Arduino.h>

/************************* Defines ********************************/

#ifndef cbi
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#endif
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif

 /* measured */
#define REF_CLOCK 19562.28 

#define dac_center 512

#define ADC_MAX  4


/************************** Variables *****************************/
/* Hold the next output sample */
volatile int PWM_OUT;
/* Get the next sample */
volatile boolean next_sample = false;

volatile boolean flip;

/* The word accumulator */
volatile uint16_t mAccu;
volatile uint16_t modAccu;
/* The accu increment */
volatile uint16_t mIcnt;
volatile uint16_t modIcnt;
/* The accu word */
/* 16 bit mWord calculated using           */
/* ((pow(2, 16) * freq) / REF_CLOCK)  */
volatile uint32_t mWord = 100;
volatile uint32_t modWord = 100;
/* The starting freq */
volatile uint32_t base_mWord = 184;    /* 55 Hz */
/* The mWord from the set knob */
volatile uint32_t knob_mword;
/* The mWord from the CV input */
volatile uint32_t cv_mWord;
/* The mod amount knob */
volatile uint32_t mod_amount;
/* Hold the mod sample */
volatile int mod_sample;
/* The zero crossing steps */
uint16_t zero;
/* Have we counted the step */
boolean zero_crossed = false;
/* The state of the LED pin */
boolean LED_HIGH = false;


/****  About the ADC  ****/
/*Hold the adc values */
unsigned long adc_array[ADC_MAX];
/*The ADC channel to read */
byte adc_count = 0;
/* The ADC to serive */
byte adc_service;
/* Tell there's a new sample */
boolean new_adc = false;

/*About the filter  */
/* .125 * 256 = 32 */
unsigned long alpha = 32;
/*Store the filtered sample */
unsigned long adc_filtered[ADC_MAX];
/*Store the previous filtered sample */
unsigned long f_v[ADC_MAX][3];

/********* Volt per Octave  ****************/
/*  Calculate the mWord from the base mWord times the 
 * volt_per_octave step.
 * 
 *  (pow(2 , (1 / (1024 / 5) * step))) * 512;
 *
 *  Use:
 * (mWord * pow2_times_512) >> 9;
 */
 const static uint16_t pow2_times_512[1024] PROGMEM = {
 512, 513, 515, 517, 518, 520, 522, 524, 526, 527, 529, 531, 533, 535, 536, 538, 540, 542, 544, 545, 547, 549, 551, 553, 555, 557, 559, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 625, 627, 629, 631, 633, 635, 637, 640, 642, 644, 646, 648, 650, 653, 655, 657, 659, 662, 664, 666, 668, 671, 673, 675, 677, 680, 682, 684, 687, 689, 691, 694, 696, 698, 701, 703, 706, 708, 710, 713, 715, 718, 720, 722, 725, 727, 730, 732, 735, 737, 740, 742, 745, 747, 750, 752, 755, 757, 760, 763, 765, 768, 770, 773, 776, 778, 781, 784, 786, 789, 792, 794, 797, 800, 802, 805, 808, 811, 813, 816, 819, 822, 824, 827, 830, 833, 836, 838, 841, 844, 847, 850, 853, 856, 859, 861, 864, 867, 870, 873, 876, 879, 882, 885, 888, 891, 894, 897, 900, 903, 906, 909, 913, 916, 919, 922, 925, 928, 931, 934, 938, 941, 944, 947, 950, 954, 957, 960, 963, 967, 970, 973, 976, 980, 983, 986, 990, 993, 996, 1000, 1003, 1007, 1010, 1014, 1017, 1020, 
1024, 1027, 1030, 1034, 1037, 1041, 1045, 1048, 1052, 1055, 1059, 1062, 1066, 1070, 1073, 1077, 1080, 1084, 1088, 1091, 1095, 1099, 1103, 1106, 1110, 1114, 1118, 1121, 1125, 1129, 1133, 1137, 1141, 1144, 1148, 1152, 1156, 1160, 1164, 1168, 1172, 1176, 1180, 1184, 1188, 1192, 1196, 1200, 1204, 1208, 1212, 1216, 1221, 1225, 1229, 1233, 1237, 1241, 1246, 1250, 1254, 1258, 1263, 1267, 1271, 1275, 1280, 1284, 1288, 1293, 1297, 1302, 1306, 1310, 1315, 1319, 1324, 1328, 1333, 1337, 1342, 1346, 1351, 1356, 1360, 1365, 1369, 1374, 1379, 1383, 1388, 1393, 1398, 1402, 1407, 1412, 1417, 1421, 1426, 1431, 1436, 1441, 1446, 1451, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495, 1500, 1506, 1511, 1516, 1521, 1526, 1531, 1536, 1542, 1547, 1552, 1557, 1563, 1568, 1573, 1579, 1584, 1589, 1595, 1600, 1606, 1611, 1617, 1622, 1628, 1633, 1639, 1644, 1650, 1655, 1661, 1667, 1672, 1678, 1684, 1689, 1695, 1701, 1707, 1712, 1718, 1724, 1730, 1736, 1742, 1747, 1753, 1759, 1765, 1771, 1777, 1783, 1789, 1795, 1802, 1808, 1814, 1820, 1826, 1832, 1838, 1845, 1851, 1857, 1864, 1870, 1876, 1883, 1889, 1895, 1902, 1908, 1915, 1921, 1928, 1934, 1941, 1947, 1954, 1961, 1967, 1974, 1981, 1987, 1994, 2001, 2008, 2014, 2021, 2028, 2035, 2042, 
2048, 2054, 2061, 2068, 2075, 2082, 2090, 2097, 2104, 2111, 2118, 2125, 2132, 2140, 2147, 2154, 2162, 2169, 2176, 2184, 2191, 2198, 2206, 2213, 2221, 2228, 2236, 2244, 2251, 2259, 2266, 2274, 2282, 2290, 2297, 2305, 2313, 2321, 2329, 2337, 2345, 2352, 2360, 2368, 2377, 2385, 2393, 2401, 2409, 2417, 2425, 2434, 2442, 2450, 2458, 2467, 2475, 2483, 2492, 2500, 2509, 2517, 2526, 2534, 2543, 2552, 2560, 2569, 2578, 2586, 2595, 2604, 2613, 2622, 2631, 2640, 2649, 2658, 2667, 2676, 2685, 2694, 2703, 2712, 2721, 2731, 2740, 2749, 2758, 2768, 2777, 2787, 2796, 2806, 2815, 2825, 2834, 2844, 2853, 2863, 2873, 2883, 2892, 2902, 2912, 2922, 2932, 2942, 2952, 2962, 2972, 2982, 2992, 3002, 3012, 3023, 3033, 3043, 3053, 3064, 3074, 3085, 3095, 3106, 3116, 3127, 3137, 3148, 3159, 3169, 3180, 3191, 3202, 3213, 3223, 3234, 3245, 3256, 3267, 3278, 3290, 3301, 3312, 3323, 3334, 3346, 3357, 3369, 3380, 3391, 3403, 3414, 3426, 3438, 3449, 3461, 3473, 3485, 3496, 3508, 3520, 3532, 3544, 3556, 3568, 3580, 3592, 3605, 3617, 3629, 3641, 3654, 3666, 3679, 3691, 3704, 3716, 3729, 3741, 3754, 3767, 3780, 3792, 3805, 3818, 3831, 3844, 3857, 3870, 3883, 3897, 3910, 3923, 3936, 3950, 3963, 3977, 3990, 4004, 4017, 4031, 4045, 4058, 4072, 4086, 
4096, 4109, 4123, 4137, 4151, 4165, 4180, 4194, 4208, 4222, 4237, 4251, 4265, 4280, 4294, 4309, 4324, 4338, 4353, 4368, 4383, 4398, 4412, 4427, 4442, 4458, 4473, 4488, 4503, 4518, 4534, 4549, 4565, 4580, 4596, 4611, 4627, 4643, 4658, 4674, 4690, 4706, 4722, 4738, 4754, 4770, 4786, 4803, 4819, 4835, 4852, 4868, 4885, 4901, 4918, 4935, 4951, 4968, 4985, 5002, 5019, 5036, 5053, 5070, 5087, 5105, 5122, 5139, 5157, 5174, 5192, 5209, 5227, 5245, 5263, 5280, 5298, 5316, 5334, 5353, 5371, 5389, 5407, 5426, 5444, 5462, 5481, 5500, 5518, 5537, 5556, 5575, 5594, 5613, 5632, 5651, 5670, 5689, 5708, 5728, 5747, 5767, 5786, 5806, 5826, 5845, 5865, 5885, 5905, 5925, 5945, 5966, 5986, 6006, 6026, 6047, 6067, 6088, 6109, 6129, 6150, 6171, 6192, 6213, 6234, 6255, 6277, 6298, 6319, 6341, 6362, 6384, 6405, 6427, 6449, 6471, 6493, 6515, 6537, 6559, 6581, 6604, 6626, 6649, 6671, 6694, 6717, 6739, 6762, 6785, 6808, 6831, 6854, 6878, 6901, 6925, 6948, 6972, 6995, 7019, 7043, 7067, 7091, 7115, 7139, 7163, 7187, 7212, 7236, 7261, 7285, 7310, 7335, 7360, 7385, 7410, 7435, 7460, 7486, 7511, 7537, 7562, 7588, 7614, 7639, 7665, 7691, 7717, 7744, 7770, 7796, 7823, 7849, 7876, 7903, 7929, 7956, 7983, 8010, 8038, 8065, 8092, 8120, 8147, 8175, 
8192, 8219, 8247, 8275, 8303, 8332, 8360, 8388, 8417, 8445, 8474, 8503, 8532, 8561, 8590, 8619, 8648, 8678, 8707, 8737, 8766, 8796, 8826, 8856, 8886, 8916, 8946, 8977, 9007, 9038, 9069, 9099, 9130, 9161, 9192, 9224, 9255, 9286, 9318, 9350, 9381, 9413, 9445, 9477, 9509, 9542, 9574, 9607, 9639, 9672, 9705, 9738, 9771, 9804, 9837, 9871, 9904, 9938, 9972, 10005, 10039, 10074, 10108, 10142, 10176, 10211, 10246, 10281, 10315, 10350, 10386, 10421, 10456, 10492, 10527, 10563, 10599, 10635, 10671, 10707, 10744, 10780, 10817, 10853, 10890, 10927, 10964, 11002, 11039, 11077, 11114, 11152, 11190, 11228, 11266, 11304, 11342, 11381, 11420, 11458, 11497, 11536, 11576, 11615, 11654, 11694, 11734, 11773, 11813, 11853, 11894, 11934, 11975, 12015, 12056, 12097, 12138, 12179, 12221, 12262, 12304, 12346, 12387, 12429, 12472, 12514, 12557, 12599, 12642, 12685, 12728, 12771, 12814, 12858, 12902, 12945, 12989, 13033, 13078, 13122, 13167, 13211, 13256, 13301, 13346, 13392, 13437, 13483, 13529, 13574, 13621, 13667, 13713, 13760, 13806, 13853, 13900, 13948, 13995, 14042, 14090, 14138, 14186, 14234, 14282, 14331, 14380, 14428, 14477, 14526, 14576, 14625, 14675, 14725, 14775, 14825, 14875, 14926, 14976, 15027, 15078, 15129, 15181, 15232, 15284, 15336, 15388, 15440, 15493, 15545, 15598, 15651, 15704, 15757, 15811, 15865, 15918, 15972, 16027, 16081, 16136, 16190, 16245, 16300,  
 };

/* Not used in this file */
/*
const static float power_of_two[1024]  PROGMEM = {
 1.000000, 1.003387, 1.006785, 1.010195, 1.013617, 1.017050, 1.020495, 1.023951, 1.027420, 1.030900, 1.034391, 1.037895, 1.041411, 1.044938, 1.048477, 1.052029, 1.055592, 1.059168, 1.062756, 1.066356, 1.069968, 1.073592, 1.077229, 1.080878, 1.084539, 1.088213, 1.091899, 1.095598, 1.099309, 1.103033, 1.106770, 1.110519, 1.114281, 1.118056, 1.121843, 1.125644, 1.129457, 1.133283, 1.137123, 1.140975, 1.144840, 1.148719, 1.152610, 1.156515, 1.160433, 1.164364, 1.168309, 1.172267, 1.176239, 1.180224, 1.184222, 1.188234, 1.192260, 1.196299, 1.200352, 1.204419, 1.208500, 1.212594, 1.216702, 1.220825, 1.224961, 1.229111, 1.233276, 1.237454, 1.241647, 1.245854, 1.250075, 1.254310, 1.258560, 1.262824, 1.267103, 1.271396, 1.275704, 1.280027, 1.284364, 1.288716, 1.293082, 1.297464, 1.301860, 1.306271, 1.310697, 1.315138, 1.319595, 1.324066, 1.328553, 1.333054, 1.337571, 1.342104, 1.346651, 1.351215, 1.355793, 1.360387, 1.364997, 1.369623, 1.374264, 1.378920, 1.383593, 1.388282, 1.392986, 1.397706, 1.402443, 1.407195, 1.411964, 1.416748, 1.421549, 1.426367, 1.431200, 1.436050, 1.440917, 1.445800, 1.450699, 1.455615, 1.460548, 1.465498, 1.470464, 1.475447, 1.480447, 1.485464, 1.490499, 1.495550, 1.500618, 1.505703, 1.510806, 1.515926, 1.521064, 1.526219, 1.531391, 1.536581, 1.541788, 1.547014, 1.552256, 1.557517, 1.562796, 1.568092, 1.573407, 1.578739, 1.584089, 1.589458, 1.594845, 1.600250, 1.605674, 1.611116, 1.616576, 1.622055, 1.627552, 1.633068, 1.638603, 1.644157, 1.649729, 1.655321, 1.660931, 1.666560, 1.672209, 1.677876, 1.683563, 1.689269, 1.694995, 1.700740, 1.706504, 1.712287, 1.718091, 1.723915, 1.729758, 1.735620, 1.741503, 1.747406, 1.753328, 1.759271, 1.765234, 1.771217, 1.777220, 1.783244, 1.789288, 1.795353, 1.801439, 1.807545, 1.813671, 1.819819, 1.825987, 1.832176, 1.838387, 1.844618, 1.850870, 1.857144, 1.863439, 1.869755, 1.876093, 1.882452, 1.888833, 1.895235, 1.901659, 1.908105, 1.914573, 1.921063, 1.927575, 1.934108, 1.940664, 1.947242, 1.953843, 1.960466, 1.967111, 1.973779, 1.980470, 1.987183, 1.993919, 
 2.000001, 2.006779, 2.013581, 2.020406, 2.027253, 2.034125, 2.041018, 2.047936, 2.054877, 2.061842, 2.068830, 2.075843, 2.082878, 2.089938, 2.097022, 2.104130, 2.111261, 2.118417, 2.125598, 2.132802, 2.140031, 2.147285, 2.154563, 2.161866, 2.169194, 2.176547, 2.183924, 2.191327, 2.198755, 2.206207, 2.213686, 2.221189, 2.228718, 2.236273, 2.243853, 2.251459, 2.259091, 2.266749, 2.274432, 2.282142, 2.289878, 2.297640, 2.305428, 2.313243, 2.321085, 2.328953, 2.336847, 2.344769, 2.352717, 2.360693, 2.368695, 2.376724, 2.384782, 2.392865, 2.400977, 2.409116, 2.417283, 2.425477, 2.433699, 2.441950, 2.450228, 2.458534, 2.466868, 2.475231, 2.483622, 2.492042, 2.500489, 2.508966, 2.517472, 2.526006, 2.534569, 2.543162, 2.551783, 2.560434, 2.569114, 2.577824, 2.586563, 2.595331, 2.604130, 2.612958, 2.621817, 2.630705, 2.639624, 2.648572, 2.657552, 2.666561, 2.675601, 2.684672, 2.693774, 2.702906, 2.712070, 2.721264, 2.730490, 2.739747, 2.749036, 2.758356, 2.767708, 2.777091, 2.786506, 2.795953, 2.805432, 2.814943, 2.824487, 2.834063, 2.843671, 2.853312, 2.862986, 2.872692, 2.882432, 2.892205, 2.902010, 2.911849, 2.921722, 2.931628, 2.941567, 2.951540, 2.961547, 2.971588, 2.981663, 2.991772, 3.001916, 3.012094, 3.022306, 3.032553, 3.042835, 3.053152, 3.063503, 3.073890, 3.084313, 3.094770, 3.105262, 3.115791, 3.126355, 3.136955, 3.147592, 3.158263, 3.168972, 3.179717, 3.190498, 3.201315, 3.212169, 3.223061, 3.233988, 3.244954, 3.255956, 3.266995, 3.278073, 3.289188, 3.300340, 3.311530, 3.322759, 3.334025, 3.345329, 3.356672, 3.368054, 3.379473, 3.390932, 3.402430, 3.413966, 3.425542, 3.437157, 3.448811, 3.460505, 3.472239, 3.484012, 3.495826, 3.507678, 3.519572, 3.531506, 3.543481, 3.555496, 3.567551, 3.579648, 3.591786, 3.603965, 3.616185, 3.628447, 3.640750, 3.653095, 3.665482, 3.677911, 3.690382, 3.702895, 3.715451, 3.728049, 3.740690, 3.753374, 3.766101, 3.778871, 3.791685, 3.804541, 3.817442, 3.830387, 3.843375, 3.856407, 3.869483, 3.882605, 3.895769, 3.908979, 3.922234, 3.935534, 3.948879, 3.962269, 3.975705, 3.989186, 
 4.000007, 4.013573, 4.027184, 4.040843, 4.054548, 4.068299, 4.082097, 4.095942, 4.109833, 4.123772, 4.137759, 4.151792, 4.165873, 4.180002, 4.194180, 4.208404, 4.222677, 4.237000, 4.251369, 4.265789, 4.280257, 4.294774, 4.309340, 4.323957, 4.338622, 4.353337, 4.368102, 4.382918, 4.397782, 4.412698, 4.427666, 4.442682, 4.457750, 4.472871, 4.488041, 4.503263, 4.518538, 4.533863, 4.549240, 4.564671, 4.580152, 4.595687, 4.611275, 4.626916, 4.642609, 4.658355, 4.674156, 4.690009, 4.705916, 4.721879, 4.737894, 4.753963, 4.770089, 4.786267, 4.802501, 4.818790, 4.835136, 4.851535, 4.867991, 4.884503, 4.901069, 4.917693, 4.934374, 4.951110, 4.967903, 4.984755, 5.001661, 5.018626, 5.035650, 5.052730, 5.069867, 5.087063, 5.104319, 5.121631, 5.139003, 5.156435, 5.173924, 5.191474, 5.209084, 5.226751, 5.244480, 5.262269, 5.280118, 5.298028, 5.315998, 5.334030, 5.352123, 5.370276, 5.388493, 5.406769, 5.425109, 5.443511, 5.461974, 5.480501, 5.499091, 5.517743, 5.536459, 5.555238, 5.574082, 5.592988, 5.611959, 5.630996, 5.650095, 5.669260, 5.688491, 5.707785, 5.727146, 5.746573, 5.766065, 5.785622, 5.805247, 5.824939, 5.844696, 5.864521, 5.884415, 5.904374, 5.924401, 5.944498, 5.964661, 5.984892, 6.005194, 6.025563, 6.046001, 6.066509, 6.087089, 6.107735, 6.128452, 6.149241, 6.170098, 6.191027, 6.212028, 6.233098, 6.254241, 6.275456, 6.296741, 6.318100, 6.339531, 6.361036, 6.382612, 6.404262, 6.425986, 6.447782, 6.469654, 6.491600, 6.513618, 6.535712, 6.557883, 6.580126, 6.602446, 6.624843, 6.647315, 6.669861, 6.692485, 6.715188, 6.737965, 6.760820, 6.783754, 6.806764, 6.829852, 6.853020, 6.876265, 6.899590, 6.922994, 6.946478, 6.970038, 6.993681, 7.017406, 7.041207, 7.065092, 7.089058, 7.113102, 7.137231, 7.161442, 7.185732, 7.210107, 7.234565, 7.259104, 7.283727, 7.308433, 7.333225, 7.358098, 7.383059, 7.408101, 7.433229, 7.458445, 7.483742, 7.509127, 7.534600, 7.560156, 7.585800, 7.611534, 7.637351, 7.663258, 7.689252, 7.715333, 7.741505, 7.767764, 7.794112, 7.820551, 7.847077, 7.873695, 7.900404, 7.927201, 7.954091, 7.981072, 
 8.000025, 8.027176, 8.054421, 8.081754, 8.109183, 8.136705, 8.164318, 8.192027, 8.219830, 8.247724, 8.275715, 8.303804, 8.331984, 8.360262, 8.388635, 8.417103, 8.445671, 8.474334, 8.503092, 8.531951, 8.560906, 8.589960, 8.619113, 8.648365, 8.677715, 8.707166, 8.736716, 8.766366, 8.796118, 8.825969, 8.855923, 8.885979, 8.916134, 8.946394, 8.976758, 9.007221, 9.037790, 9.068464, 9.099238, 9.130119, 9.161106, 9.192194, 9.223393, 9.254694, 9.286100, 9.317617, 9.349237, 9.380966, 9.412804, 9.444747, 9.476799, 9.508964, 9.541234, 9.573613, 9.606104, 9.638704, 9.671415, 9.704238, 9.737171, 9.770215, 9.803375, 9.836644, 9.870026, 9.903523, 9.937131, 9.970855, 10.004694, 10.038646, 10.072715, 10.106899, 10.141198, 10.175615, 10.210147, 10.244796, 10.279565, 10.314449, 10.349452, 10.384577, 10.419816, 10.455178, 10.490661, 10.526262, 10.561984, 10.597829, 10.633793, 10.669879, 10.706092, 10.742423, 10.778879, 10.815460, 10.852162, 10.888989, 10.925945, 10.963022, 11.000226, 11.037557, 11.075013, 11.112598, 11.150310, 11.188149, 11.226119, 11.264213, 11.302440, 11.340797, 11.379281, 11.417898, 11.456647, 11.495524, 11.534535, 11.573679, 11.612953, 11.652363, 11.691908, 11.731583, 11.771395, 11.811343, 11.851424, 11.891642, 11.931999, 11.972488, 12.013117, 12.053887, 12.094788, 12.135834, 12.177018, 12.218338, 12.259803, 12.301405, 12.343150, 12.385038, 12.427064, 12.469236, 12.511551, 12.554007, 12.596609, 12.639356, 12.682247, 12.725283, 12.768468, 12.811794, 12.855271, 12.898897, 12.942666, 12.986586, 13.030657, 13.074873, 13.119243, 13.163763, 13.208432, 13.253256, 13.298231, 13.343354, 13.388635, 13.434065, 13.479654, 13.525397, 13.571291, 13.617344, 13.663556, 13.709918, 13.756441, 13.803124, 13.849961, 13.896959, 13.944118, 13.991434, 14.038910, 14.086551, 14.134351, 14.182313, 14.230440, 14.278726, 14.327178, 14.375799, 14.424577, 14.473523, 14.522640, 14.571917, 14.621366, 14.670980, 14.720761, 14.770714, 14.820834, 14.871123, 14.921589, 14.972219, 15.023024, 15.074004, 15.125151, 15.176475, 15.227973, 15.279644, 15.331491, 15.383518, 15.435715, 15.488092, 15.540649, 15.593379, 15.646290, 15.699385, 15.752653, 15.806104, 15.859739, 15.913553, 15.967553, 
 16.000083, 16.054418, 16.108945, 16.163646, 16.218542, 16.273626, 16.328886, 16.384340, 16.439989, 16.495813, 16.551836, 16.608049, 16.664445, 16.721038, 16.777830, 16.834798, 16.891971, 16.949342, 17.006895, 17.064649, 17.122606, 17.180747, 17.239091, 17.297641, 17.356376, 17.415315, 17.474464, 17.533800, 17.593347, 17.653087, 17.713033, 17.773189, 17.833539, 17.894098, 17.954870, 18.015836, 18.077014, 18.138406, 18.199993, 18.261798, 18.323816, 18.386032, 18.448467, 18.511119, 18.573972, 18.637046, 18.700336, 18.763832, 18.827548, 18.891487, 18.955629, 19.019998, 19.084589, 19.149387, 19.214418, 19.279663, 19.345123, 19.410820, 19.476724, 19.542858, 19.609224, 19.675804, 19.742614, 19.809656, 19.876914, 19.944408, 20.012138, 20.080083, 20.148265, 20.216684, 20.285326, 20.354202, 20.423322, 20.492664, 20.562244, 20.632068, 20.702117, 20.772409, 20.842947, 20.913713, 20.984722, 21.055980, 21.127468, 21.199211, 21.271183, 21.343404, 21.415882, 21.488590, 21.561550, 21.634767, 21.708215, 21.781921, 21.855884, 21.930086, 22.004543, 22.079263, 22.154220, 22.229440, 22.304924, 22.380645, 22.456632, 22.532886, 22.609382, 22.686145, 22.763175, 22.840454, 22.918001, 22.995819, 23.073888, 23.152235, 23.230831, 23.309703, 23.388851, 23.468250, 23.547929, 23.627885, 23.708093, 23.788587, 23.869356, 23.950387, 24.031702, 24.113296, 24.195152, 24.277296, 24.359729, 24.442420, 24.525403, 24.608675, 24.692211, 24.776039, 24.860162, 24.944555, 25.029239, 25.114221, 25.199474, 25.285032, 25.370874, 25.456995, 25.543430, 25.630140, 25.717147, 25.804462, 25.892059, 25.979957, 26.068162, 26.156652, 26.245450, 26.334556, 26.423948, 26.513654, 26.603668, 26.693977, 26.784597, 26.875534, 26.966758, 27.058305, 27.150169, 27.242328, 27.334808, 27.427610, 27.520709, 27.614135, 27.707887, 27.801935, 27.896326, 27.991014, 28.086030, 28.181383, 28.277040, 28.373029, 28.469354, 28.565988, 28.662960, 28.760267, 28.857889, 28.955846, 29.054151, 29.152767, 29.251724, 29.351032, 29.450656, 29.550628, 29.650947, 29.751588, 29.852581, 29.953922, 30.055591, 30.157615, 30.259994, 30.362701, 30.465774, 30.569177, 30.672941, 30.777070, 30.881530, 30.986354, 31.091543, 31.197072, 31.302967, 31.409235, 31.515836, 31.622810, 31.730163, 31.837854,  
 };
 */ 

/* A 1024 sample 10 bit sine wave, centered around 512 */
const int sine_wave[1024] PROGMEM = {
  0, 3, 6, 9, 12, 15, 18, 21, 25, 28, 31, 34, 37, 40, 43, 47, 50, 53, 56, 59, 62, 65, 68, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 
195, 198, 201, 204, 207, 210, 213, 216, 218, 221, 224, 227, 230, 232, 235, 238, 241, 244, 246, 249, 252, 255, 257, 260, 263, 265, 268, 271, 273, 276, 279, 281, 284, 287, 289, 292, 294, 297, 299, 302, 304, 307, 309, 312, 314, 317, 319, 322, 324, 327, 329, 331, 334, 336, 339, 341, 343, 346, 348, 350, 352, 355, 357, 359, 
361, 364, 366, 368, 370, 372, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 412, 414, 416, 418, 420, 422, 423, 425, 427, 429, 430, 432, 434, 435, 437, 438, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 
472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 493, 494, 495, 496, 497, 497, 498, 499, 499, 500, 501, 501, 502, 502, 503, 504, 504, 505, 505, 506, 506, 506, 507, 507, 508, 508, 508, 509, 509, 509, 509, 510, 510, 510, 510, 510, 511, 511, 511, 511, 511, 511, 511, 
511, 511, 511, 511, 511, 511, 511, 510, 510, 510, 510, 510, 510, 509, 509, 509, 508, 508, 508, 507, 507, 507, 506, 506, 505, 505, 504, 504, 503, 503, 502, 502, 501, 500, 500, 499, 498, 498, 497, 496, 495, 495, 494, 493, 492, 491, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 476, 475, 474, 473, 
472, 470, 469, 468, 467, 465, 464, 463, 461, 460, 459, 457, 456, 454, 453, 452, 450, 449, 447, 446, 444, 442, 441, 439, 438, 436, 434, 433, 431, 429, 428, 426, 424, 422, 421, 419, 417, 415, 413, 412, 410, 408, 406, 404, 402, 400, 398, 396, 394, 392, 390, 388, 386, 384, 382, 380, 378, 376, 373, 371, 369, 367, 365, 363, 
360, 358, 356, 354, 351, 349, 347, 344, 342, 340, 337, 335, 333, 330, 328, 325, 323, 321, 318, 316, 313, 311, 308, 306, 303, 301, 298, 296, 293, 290, 288, 285, 283, 280, 277, 275, 272, 269, 267, 264, 261, 259, 256, 253, 250, 248, 245, 242, 239, 237, 234, 231, 228, 225, 223, 220, 217, 214, 211, 208, 206, 203, 200, 197, 
194, 191, 188, 185, 182, 179, 176, 173, 171, 168, 165, 162, 159, 156, 153, 150, 147, 144, 141, 138, 135, 132, 128, 125, 122, 119, 116, 113, 110, 107, 104, 101, 98, 95, 92, 89, 85, 82, 79, 76, 73, 70, 67, 64, 61, 57, 54, 51, 48, 45, 42, 39, 36, 32, 29, 26, 23, 20, 17, 14, 10, 7, 4, 1, 
-2, -5, -8, -11, -15, -18, -21, -24, -27, -30, -33, -37, -40, -43, -46, -49, -52, -55, -58, -62, -65, -68, -71, -74, -77, -80, -83, -86, -90, -93, -96, -99, -102, -105, -108, -111, -114, -117, -120, -123, -126, -129, -133, -136, -139, -142, -145, -148, -151, -154, -157, -160, -163, -166, -169, -172, -174, -177, -180, -183, -186, -189, -192, -195, 
-198, -201, -204, -207, -209, -212, -215, -218, -221, -224, -226, -229, -232, -235, -238, -240, -243, -246, -249, -251, -254, -257, -260, -262, -265, -268, -270, -273, -276, -278, -281, -284, -286, -289, -291, -294, -297, -299, -302, -304, -307, -309, -312, -314, -317, -319, -322, -324, -326, -329, -331, -334, -336, -338, -341, -343, -345, -348, -350, -352, -355, -357, -359, -361, 
-364, -366, -368, -370, -372, -374, -377, -379, -381, -383, -385, -387, -389, -391, -393, -395, -397, -399, -401, -403, -405, -407, -409, -411, -413, -414, -416, -418, -420, -422, -423, -425, -427, -429, -430, -432, -434, -435, -437, -439, -440, -442, -443, -445, -447, -448, -450, -451, -453, -454, -455, -457, -458, -460, -461, -462, -464, -465, -466, -468, -469, -470, -471, -473, 
-474, -475, -476, -477, -479, -480, -481, -482, -483, -484, -485, -486, -487, -488, -489, -490, -491, -492, -492, -493, -494, -495, -496, -496, -497, -498, -499, -499, -500, -501, -501, -502, -503, -503, -504, -504, -505, -505, -506, -506, -507, -507, -508, -508, -508, -509, -509, -509, -510, -510, -510, -511, -511, -511, -511, -511, -511, -512, -512, -512, -512, -512, -512, -512, 
-512, -512, -512, -512, -512, -512, -512, -511, -511, -511, -511, -511, -510, -510, -510, -510, -509, -509, -509, -508, -508, -507, -507, -507, -506, -506, -505, -505, -504, -503, -503, -502, -502, -501, -500, -500, -499, -498, -498, -497, -496, -495, -494, -494, -493, -492, -491, -490, -489, -488, -487, -486, -485, -484, -483, -482, -481, -480, -479, -478, -477, -476, -474, -473, 
-472, -471, -470, -468, -467, -466, -464, -463, -462, -460, -459, -458, -456, -455, -453, -452, -450, -449, -447, -446, -444, -443, -441, -439, -438, -436, -435, -433, -431, -430, -428, -426, -424, -423, -421, -419, -417, -415, -413, -412, -410, -408, -406, -404, -402, -400, -398, -396, -394, -392, -390, -388, -386, -384, -382, -380, -378, -376, -373, -371, -369, -367, -365, -362, 
-360, -358, -356, -353, -351, -349, -347, -344, -342, -340, -337, -335, -332, -330, -328, -325, -323, -320, -318, -315, -313, -310, -308, -305, -303, -300, -298, -295, -293, -290, -288, -285, -282, -280, -277, -274, -272, -269, -266, -264, -261, -258, -256, -253, -250, -247, -245, -242, -239, -236, -233, -231, -228, -225, -222, -219, -217, -214, -211, -208, -205, -202, -199, -196, 
-194, -191, -188, -185, -182, -179, -176, -173, -170, -167, -164, -161, -158, -155, -152, -149, -146, -143, -140, -137, -134, -131, -128, -125, -122, -119, -116, -113, -110, -107, -103, -100, -97, -94, -91, -88, -85, -82, -79, -76, -73, -69, -66, -63, -60, -57, -54, -51, -48, -44, -41, -38, -35, -32, -29, -26, -22, -19, -16, -13, -10, -7, -4, 0, 

};

/**************************  Functions ****************************/
void chage_adc(byte this_adc){
  ADMUX = 0x40 + this_adc;
  /*Start the conversion */
  sbi(ADCSRA, ADSC); 
}

/**************************  Functions ****************************/
/* An integer math low pass filter for smooting the ADC reads */
void filter(byte ary_num) {
  /*Calculate the new value */
  //f_v[ary_num][1] = (float)alpha * adc_array[ary_num] + (1 - alpha) * f_v[ary_num][0];
  f_v[ary_num][1] = (((adc_array[ary_num] << 8) * alpha) + ((256 - alpha) * ( f_v[ary_num][0] << 8))) >> 16;
  /*Store the old value */
  f_v[ary_num][0] = f_v[ary_num][1];

  /*Store the filtered value */
  adc_filtered[ary_num] = f_v[ary_num][1];
}


/******************************************************************/
/*************************** Setup ********************************/
/******************************************************************/
void setup() {

  /************************* Setup Pins ***************************/
  /* PB5 as PWM Output */
  DDRB |= _BV (5);
  /* PD0 as Output for blinky LED */
  DDRD |= _BV (0);
  /* PD2 as Output for ISR timing check */
  DDRD |= _BV (2);

   /*************************  Setup ADC ***************************/
  /*Clear to Right Adjust for 1024 precision */
  cbi(ADMUX, ADLAR);

  /*Set to VRef to AVCC */
  cbi(ADMUX, REFS1);
  sbi(ADMUX, REFS0);

  /*Set to ADC0 to start */
  cbi(ADMUX, MUX3);
  cbi(ADMUX, MUX2);
  cbi(ADMUX, MUX1);
  cbi(ADMUX, MUX0);

  /*Set prescaler to 64 */
  sbi(ADCSRA, ADPS2);
  sbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);

  /*Turn the ADC ON  */
  sbi(ADCSRA, ADEN);

  /*Start the first conversion */
  sbi(ADCSRA, ADSC);
   

 /*************************  Setup Timer1 ************************/
  /* Stop interrupts */
  cli();

  /* Set the Output Pin */
  sbi(TCCR1A,COM1A1);
  cbi(TCCR1A,COM1A0);

  /* Set to 10 Bit Fast PWM  */
  /* 20000000 / 1024 = 19531.25 measured 19562.28 */
  sbi(TCCR1A, WGM10);
  sbi(TCCR1A, WGM11);
  sbi(TCCR1B, WGM12);
  cbi(TCCR1B, WGM13);


  /* Set prescaler */
  /*  CS12  CS11  CS10    prescaler
       0    0     0       No clock source, disabled
       0    0     1       System clock, no prescale
       0    1     0       clk/8
       0    1     1       clk/64
       1    0     0       clk/256
       1    0     1       clk/1024
  */
  cbi(TCCR1B, CS12);
  cbi(TCCR1B, CS11);
  sbi(TCCR1B, CS10);

  /* Enable timer compare interrupt */
  /* This will enable the ISR to be used */
  sbi(TIMSK, TOIE1);
  sei();                /*  allow interrupts  */

}/**************************  End Setup **************************/

ISR(TIMER1_OVF_vect){
  OCR1A = dac_center + PWM_OUT;

/* Check the timing of the ISR */
  //flip = !flip;
  //if(flip){
  //  PORTD |= _BV (2);
  //}else{
  //  PORTD &= ~_BV (2);
  //}
  
  next_sample = true;
}

/******************************************************************/
/**************************** Loop ********************************/
/******************************************************************/
void loop() {
  if(next_sample){
    int pwm_sample;

  

    /* Add the mWord to the accumulator */
    mAccu += (int) mWord + mod_sample;
    modAccu += (int) modWord;

    /* Get the top 10 bits */
    mIcnt = (mAccu >> 6);
    modIcnt = (modAccu >> 6);

      

    /* Get the sample from PROGMEM */
    pwm_sample = (int) pgm_read_word(&sine_wave[(int)mIcnt]);
    mod_sample = (int) pgm_read_word(&sine_wave[(int)modIcnt]);

    mod_sample = ((mod_sample << 3) * mod_amount) >> 8;

    PWM_OUT = (int) pwm_sample;

    if(PWM_OUT > 0 && !zero_crossed){
      zero_crossed = true;
      zero += 10;
    }
    if(PWM_OUT <= 0 && zero_crossed){
      zero_crossed = false;
    }
    if(zero > (1024 - adc_array[3])){
      zero = 0;
      LED_HIGH = !LED_HIGH;
      if(LED_HIGH){
        PORTD |= _BV (0);
      }else{
        PORTD &= ~_BV (0);
      }
    }

    next_sample = false;
  }

    /*Check to see if ADC has finished */
  if (!(bitRead(ADCSRA, ADSC)) && !next_sample) {
    /*Read and store the results  */
    byte temp_adcl = ADCL;
    int temp_adc = (ADCH << 8) + temp_adcl;
    /*Keep a running average */
    adc_array[adc_count] = (adc_array[adc_count] + temp_adc) / 2;
    /*Filter the results using an integer math low pass filter */
    filter(adc_count);
    /* The adc to service */
    adc_service = adc_count;
    /* Increment the adc count */
    adc_count ++;
    if(adc_count == ADC_MAX){
      adc_count = 0;
    }
    /* Change the ADC */
    chage_adc(adc_count);

    new_adc = true;
  }

  if(new_adc && !next_sample){
        uint32_t knob_temp;
        uint16_t this_mod;
        uint32_t this_mod_step;

        switch (adc_service)
    {
      case 0:
        /* Get the set freq from the freq knob  */
        knob_temp = pgm_read_word(&(pow2_times_512[(adc_filtered[0] >> 2)]));
        knob_mword = (base_mWord * knob_temp) >> 9;
        break;
      case 1:
          this_mod = adc_filtered[1]; 
          this_mod_step = pgm_read_word(&(pow2_times_512[this_mod]));
          modWord = ((cv_mWord >> 3) * this_mod_step) >> 9;
        break;
      case 2:
        mod_amount = adc_filtered[2] >> 2;
        break;
      case 3:
        /* Calculate the CV word from the set knob */
        cv_mWord = (knob_mword * pgm_read_word(&(pow2_times_512[adc_array[3]]))) >> 9;
        break;                        

    }
    mWord = cv_mWord;
    new_adc = false;
  }


}/*************************** End Loop *****************************/